/*
    Precached - A Linux process monitor and pre-caching daemon
    Copyright (C) 2017 the precached developers

    This file is part of precached.

    Precached is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Precached is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Precached.  If not, see <http://www.gnu.org/licenses/>.
*/

extern crate chrono;
extern crate clap;
#[macro_use]
extern crate lazy_static;
#[macro_use]
extern crate log;
extern crate nix;
extern crate pretty_env_logger;
#[macro_use]
extern crate serde_derive;
extern crate zstd;

mod util;
mod process;
mod iotrace;
mod constants;

use clap::{App, Arg, SubCommand};

/// Runtime configuration for precached-iotrace
#[derive(Debug, Clone)]
pub struct Config<'a> {
    /// The verbosity of text output
    pub verbosity: u8,
    pub files: String,
    pub matches: clap::ArgMatches<'a>,
}

impl<'a> Config<'a> {
    pub fn new() -> Config<'a> {
        let matches = App::new("precached-iotrace")
            .version("0.1.0")
            .author("X3n0m0rph59 <x3n0m0rph59@gmail.com>")
            .about("Manage I/O traces generated by precached")
            .arg(
                Arg::with_name("v")
                    .short("v")
                    .multiple(true)
                    .help("Sets the level of output verbosity"),
            )
            .arg(
                Arg::with_name("config")
                    .short("c")
                    .long("config")
                    .value_name("file")
                    .help("Specifies the precached config file to use")
                    .default_value("/etc/precached/precached.conf")
                    .takes_value(true),
            )
            .subcommand(
                SubCommand::with_name("list")
                    .about("List all available I/O traces")
                    .arg(
                        Arg::with_name("long")
                            .short("l")
                            .help("Use long display format"),
                    ),
            )
            .subcommand(
                SubCommand::with_name("info")
                    .about("Display metadata about an I/O trace")
                    .help("Print status information about a specific I/O trace"),
            )
            .subcommand(
                SubCommand::with_name("dump")
                    .about("Dump an I/O trace")
                    .help("Print the whole I/O trace"),
            )
            .subcommand(
                SubCommand::with_name("help")
                    .about("Display this help text")
                    .arg(
                        Arg::with_name("debug")
                            .short("d")
                            .index(4)
                            .help("print debug information verbosely"),
                    ),
            )
            .get_matches();

        Config {
            verbosity: matches.occurrences_of("v") as u8,
            files: String::new(), // matches.values_of("INPUT").unwrap(),
            matches: matches,
        }
    }
}

/// Print a license header to the console
fn print_license_header() {
    println!(
        "precached Copyright (C) 2017 the precached team
This program comes with ABSOLUTELY NO WARRANTY;
This is free software, and you are welcome to redistribute it
under certain conditions.
"
    );
}

/// Program entrypoint
fn main() {
    if unsafe { nix::libc::isatty(0) } == 1 {
        print_license_header();
    }

    pretty_env_logger::init().expect("Could not initialize the logging subsystem!");

    let config = Config::new();

    let trace = iotrace::IOTraceLog::new(1);

    if let Some(command) = config.matches.subcommand_name() {
        println!(
            "Hello World from precached-iotrace! Command was: {}",
            command
        );
    } else {

    }
}
