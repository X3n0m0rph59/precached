
## <summary>policy for precached</summary>

########################################
## <summary>
##	Execute precached_exec_t in the precached domain.
## </summary>
## <param name="domain">
## <summary>
##	Domain allowed to transition.
## </summary>
## </param>
#
interface(`precached_domtrans',`
	gen_require(`
		type precached_t, precached_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, precached_exec_t, precached_t)
')

######################################
## <summary>
##	Execute precached in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`precached_exec',`
	gen_require(`
		type precached_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, precached_exec_t)
')

########################################
## <summary>
##	Search precached lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`precached_search_lib',`
	gen_require(`
		type precached_var_lib_t;
	')

	allow $1 precached_var_lib_t:dir search_dir_perms;
	files_search_var_lib($1)
')

########################################
## <summary>
##	Read precached lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`precached_read_lib_files',`
	gen_require(`
		type precached_var_lib_t;
	')

	files_search_var_lib($1)
	read_files_pattern($1, precached_var_lib_t, precached_var_lib_t)
')

########################################
## <summary>
##	Manage precached lib files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`precached_manage_lib_files',`
	gen_require(`
		type precached_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, precached_var_lib_t, precached_var_lib_t)
')

########################################
## <summary>
##	Manage precached lib directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`precached_manage_lib_dirs',`
	gen_require(`
		type precached_var_lib_t;
	')

	files_search_var_lib($1)
	manage_dirs_pattern($1, precached_var_lib_t, precached_var_lib_t)
')

########################################
## <summary>
##	Read precached PID files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`precached_read_pid_files',`
	gen_require(`
		type precached_var_run_t;
	')

	files_search_pids($1)
	read_files_pattern($1, precached_var_run_t, precached_var_run_t)
')


########################################
## <summary>
##	All of the rules required to administrate
##	an precached environment
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`precached_admin',`
	gen_require(`
		type precached_t;
		type precached_var_lib_t;
		type precached_var_run_t;
	')

	allow $1 precached_t:process { signal_perms };
	ps_process_pattern($1, precached_t)

    tunable_policy(`deny_ptrace',`',`
        allow $1 precached_t:process ptrace;
    ')

	files_search_var_lib($1)
	admin_pattern($1, precached_var_lib_t)

	files_search_pids($1)
	admin_pattern($1, precached_var_run_t)
#	optional_policy(`
#		systemd_passwd_agent_exec($1)
#		systemd_read_fifo_file_passwd_run($1)
#	')
')
